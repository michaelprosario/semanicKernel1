
@using Markdig
@using Microsoft.SemanticKernel;
@using Microsoft.SemanticKernel.ChatCompletion;
@using Microsoft.SemanticKernel.Connectors.OpenAI;
@using ModelContextProtocol
@using ModelContextProtocol.Client
@using ModelContextProtocol.Protocol.Transport
@inject IJSRuntime JS;
@inject IConfiguration Configuration;

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">AI Chat Assistant</h3>
                </div>
                <div class="card-body">
                    <div class="chat-container mb-3" style="height: 400px; overflow-y: auto;" @ref="chatContainerRef">
                        @foreach (var message in chatHistory)
                        {
                            <div class="@(message.Role == AuthorRole.User ? "user-message" : "assistant-message") mb-2 p-2 rounded">
                                <strong>@(message.Role == AuthorRole.User ? "User" : "Assistant")</strong>
                                <div>@this.GetHtmlFromMarkDown(@message.Content)</div>
                            </div>
                        }
                        @if (isLoading)
                        {
                            <div class="assistant-message mb-2 p-2 rounded">
                                <strong>Assistant</strong>
                                <div class="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Type your message..."
                        @bind="userInput"
                        @bind:event="oninput"
                        @onkeydown="@HandleKeyPress" />
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@(string.IsNullOrWhiteSpace(userInput) || isLoading)">
                            <i class="bi bi-send"></i> Send
                        </button>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-outline-secondary" @onclick="ClearChat">Clear Chat</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ChatHistory chatHistory = new();
    private string userInput = string.Empty;
    private bool isLoading = false;
    private ElementReference chatContainerRef;
    Kernel kernel;
    IChatCompletionService ChatCompletionService;

    public MarkupString GetHtmlFromMarkDown(string input){
        return new MarkupString(Markdown.ToHtml(input));
    }

    protected override async Task OnInitializedAsync()
    {
        string openAiApiKey = Configuration["OPENAI_API_KEY"];
        string modelId = "gpt-4o-mini";

        // Create a kernel with Azure OpenAI chat completion
        var builder = Kernel.CreateBuilder();
        builder.Services.AddOpenAIChatCompletion(modelId, openAiApiKey);

        // Create an MCPClient for the GitHub server
        await using IMcpClient mcpClient = await McpClientFactory.CreateAsync(new StdioClientTransport(new()
            {
                Name = "GitHub",
                Command = "npx",
                Arguments = ["-y", "@modelcontextprotocol/server-github"],
            }));

        var tools = await mcpClient.ListToolsAsync().ConfigureAwait(false);
        foreach (var tool in tools)
        {
            Console.WriteLine($"{tool.Name}: {tool.Description}");
        }            

        kernel = builder.Build();

        ChatCompletionService = kernel.GetRequiredService<IChatCompletionService>();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", chatContainerRef);
        }
        catch
        {
            // Handle any exceptions that might occur
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userInput) && !isLoading)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading)
            return;

        string message = userInput.Trim();
        userInput = string.Empty;

        // Add user message to history
        chatHistory.AddUserMessage(message);
        StateHasChanged();
        await ScrollToBottom();

        isLoading = true;
        StateHasChanged();

        try
        {
            // Configure execution settings
            OpenAIPromptExecutionSettings executionSettings = new()
                {
                    FunctionChoiceBehavior = FunctionChoiceBehavior.Auto()
                };

            // Access kernel using dependency injection
            


            // Get response from AI
            var result = await ChatCompletionService.GetChatMessageContentAsync(
                chatHistory,
                executionSettings: executionSettings,
                kernel
            );

            // Add AI response to history
            chatHistory.AddMessage(result.Role, result.Content ?? string.Empty);
        }
        catch (Exception ex)
        {
            // Handle exception
            chatHistory.AddAssistantMessage($"I encountered an error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private void ClearChat()
    {
        chatHistory = new ChatHistory();
        StateHasChanged();
    }
}